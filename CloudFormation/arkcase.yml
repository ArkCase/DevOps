# Copyright (c) 2020 Armedia, LLC
---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Deploy ArkCase

Parameters:
  Env:
    Type: String
    Description: Type of environment to provision
    Default: prod
    AllowedValues: [ staging, prod, dev, test, load-test ]

  Project:
    Type: String
    Description: Name of the project (or product)
    Default: arkcase
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[a-z][-a-z0-9]*[a-z0-9]$
    ConstraintDescription: >
      Up to 30 alpha-numeric lowercase characters; can use dashes; must start
      with a letter and end with an alphanumeric character

  VpcCidr:
    Type: String
    Description: CIDR block for the VPC
    MinLength: 9
    MaxLength: 18
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}/\d{1,2}$
    ConstraintDescription: Must be a valid CIDR range like "10.10.0.0/16"
    Default: 10.210.0.0/16

  MaintenanceWindowStart:
    Type: String
    Description: >
      Weekly maintenance window for the whole deployment. Must be in the
      format "DDD:HH:MM" and must be in UTC time. "DDD" is the three-letter day
      of the week (eg: "Sun"); "HH" is the hour in 24h format; "MM" is the
      minutes. We strongly recommend you use Sunday early morning in your own
      time zone. The maintenance would typically take a couple of hours.
    Default: Sun:08:00
    AllowedPattern: ^[a-zA-Z]{3}:[0-2][0-9]:[0-5][0-9]$
    ConstraintDescription: Must be in the format "DDD:HH:MM"

  DsEdition:
    Type: String
    Description: Whether Directory Services is Enterprise or Standard
    Default: Standard
    AllowedValues: [ Enterprise, Standard ]

  DsName:
    Type: String
    Description: |
      The fully qualified domain name for the AWS Managed Microsoft AD directory, such as
      corp.example.com. This name will resolve inside your VPC only. It does not need to be
      publicly resolvable.
    AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
    ConstraintDescription: Must be a valid fully qualified domain name.
    Default: ecmontap.com

  DsPassword:
    Type: String
    Description: |
      The password for the default administrative user named Admin. The
      password must be between 12 and 64 characters, not contain the
      word "admin", and must have at least one character from three of these
      four categories: lowercase, uppercase, numeric and special characters
    NoEcho: true
    MinLength: 12
    MaxLength: 64
    AllowedPattern: (?=^.{12,64}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\s]))^.*
    ConstraintDescription: >
      12-64 characters; must have at least one character from three of these
      four categories: lowercase, uppercase, numeric and special characters

  AmazonmqInstanceType:
    Type: String
    Description: The instance type to use for the AmazonMQ broker
    Default: mq.m5.large
    AllowedValues:
      - mq.t2.micro
      - mq.m5.large
      - mq.m5.xlarge
      - mq.m5.2xlarge
      - mq.m5.4xlarge

  ActivemqVersion:
    Type: String
    Description: ActiveMQ version to use
    Default: 5.15.10
    AllowedValues: [ 5.15.10, 5.15.9, 5.15.8, 5.15.6, 5.15.0 ]

  AmazonmqEnableAuditLogs:
    Type: String
    Description: Whether to enable audit logs for the AmazonMQ broker
    Default: false
    AllowedValues: [ true, false ]

  PasswordsLength:
    Type: Number
    Description: >
      How long passwords should be for various AWS services
    Default: 40
    MinValue: 12
    MaxValue: 40

  MariadbRdsInstanceClass:
    Type: String
    Description: >
      RDS instance class for the database; for more detail, refer to the
      official AWS documentation here:
      https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html
    Default: db.t3.small
    AllowedValues: [ db.m5.24xlarge, db.m5.16xlarge, db.m5.12xlarge, db.m5.8xlarge, db.m5.4xlarge, db.m5.4xlarge, db.m5.2xlarge, db.m5.xlarge, db.m5.large,
                     db.m4.16xlarge, db.m4.10xlarge, db.m4.4xlarge, db.m4.2xlarge, db.m4.xlarge, db.m4.large,
                     db.z1d.12xlarge, db.z1d.6xlarge, db.z1d.3xlarge, db.z1d.2xlarge, db.z1d.xlarge, db.z1d.large,
                     db.x1e.32xlarge, db.x1e.16xlarge, db.x1e.8xlarge, db.x1e.4xlarge, db.x1e.2xlarge, db.x1e.xlarge,
                     db.x1.32xlarge, db.x1.16xlarge,
                     db.r5.24xlarge, db.r5.16xlarge, db.r5.12xlarge, db.r5.8xlarge, db.r5.4xlarge, db.r5.2xlarge, db.r5.xlarge, db.r5.large,
                     db.r4.16xlarge, db.r4.8xlarge, db.r4.4xlarge, db.r4.2xlarge, db.r4.xlarge, db.r4.large,
                     db.t3.2xlarge, db.t3.xlarge, db.t3.large, db.t3.medium, db.t3.small, db.t3.micro,
                     db.t2.2xlarge, db.t2.xlarge, db.t2.large, db.t2.medium, db.t2.small, db.t2.micro ]

  MariadbRdsDiskSizeGB:
    Type: Number
    Description: Size of the disk for the MariaDB RDS instance, in GB
    MinValue: 20
    Default: 50

  MariadbRdsEnableHotStandby:
    Type: String
    Description: >
      If this is set to `true`, RDS will maintain a hot standy in a different
      Availability Zone. This will make the database highly available, but
      will cost more. Please note this has no effect on performance.
    Default: true
    AllowedValues: [ true, false ]

  HowManyDaysLeftBeforeRenewing:
    Type: Number
    Description: >
      How many days left to expiry before an internal certificate should be renewed
    MinValue: 0
    Default: 15

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: IMPORTANT PARAMETERS }
        Parameters:
          - Env
          - VpcCidr
          - MaintenanceWindowStart

      - Label: { default: Definition (this and the following sections are less important) }
        Parameters:
          - Project

      - Label: { default: General security }
        Parameters:
          - PasswordsLength

      - Label: { default: Database configuration }
        Parameters:
          - MariadbRdsInstanceClass
          - MariadbRdsDiskSizeGB
          - MariadbRdsEnableHotStandby

      - Label: { default: Directory Services Configuration }
        Parameters:
          - DsEdition
          - DsName
          - DsPassword

      - Label: { default: Amazon MQ }
        Parameters:
          - AmazonmqInstanceType
          - ActivemqVersion
          - AmazonmqEnableAuditLogs

      - Label: { default: PKI }
        Parameters:
          - HowManyDaysLeftBeforeRenewing

    ParameterLabels:
      Env: { default: Environment }
      VpcCidr: { default: VPC CIDR block }
      MaintenanceWindowStart: { default: Start of weekly maintenance window }
      DsEdition: { default: Directory Services Edition }
      DsName: { default: Domain Name }
      DsPassword: { default: Admin User Password }
      AmazonmqInstanceType: { default: AmazonMQ instance type }
      ActivemqVersion: { default: ActiveMQ version }
      AmazonmqEnableAuditLogs: { default: Enable AmazonMQ audit logs }
      PasswordsLength: { default: Passwords length }
      MariadbRdsInstanceClass: { default: MariaDB RDS instance class }
      MariadbRdsDiskSizeGB: { default: "MariaDB RDS disk size, in GB" }
      MariadbRdsEnableHotStandby: { default: Enable MariaDB RDS hot standby }
      HowManyDaysLeftBeforeRenewing: { default: How many days to expiry before renewing a certificate }

Resources:

  #######
  # VPC #
  #######

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub vpc-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub internet-gateway-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidr, 4, 10 ] ]
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub public-subnet-A-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcCidr, 4, 10 ] ]
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub public-subnet-B-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 2, !Cidr [ !Ref VpcCidr, 4, 10 ] ]
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub private-subnet-A-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 3, !Cidr [ !Ref VpcCidr, 4, 10 ] ]
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub private-subnet-B-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  ElasticIpForNatGateway:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub elastic-ip-for-nat-gateway-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIpForNatGateway.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub nat-gateway-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub public-route-table-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub private-route-table-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: network
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  ###############################
  # Route53 private hosted zone #
  ###############################

  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub ${Project}.lan
      VPCs:
        - VPCId: !Ref Vpc
          VPCRegion: !Ref AWS::Region
      HostedZoneTags:
        - Key: Name
          Value: !Sub private-hosted-zone-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: global
        - Key: Component
          Value: route53
        - Key: ManagedBy
          Value: CloudFormation

  ##############
  # Monitoring #
  ##############

  AlertsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: !Sub alerts-sns-topic-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: monitoring
        - Key: Component
          Value: sns
        - Key: ManagedBy
          Value: CloudFormation

  ###############################
  # Compute Maintenance Windows #
  ###############################

  MaintenanceWindowsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Sub maintenance-windows-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: global
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  MaintenanceWindowsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Calculate ArkCase maintenance windows
      Runtime: python3.7
      Role: !GetAtt MaintenanceWindowsLambdaExecutionRole.Arn
      Handler: maintenance_windows.handler
      Timeout: 5
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200815-0749/LambdaFunctions/maintenance_windows/maintenance_windows.zip
      Tags:
        - Key: Name
          Value: !Sub maintenance-windows-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: global
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  MaintenanceWindows:
    Type: Custom::MaintenanceWindows
    Properties:
      ServiceToken: !GetAtt MaintenanceWindowsLambda.Arn
      Start: !Ref MaintenanceWindowStart
      # The following random token is not used by the Lambda function; its
      # only purpose is to force the Lambda function to be called every time
      # the stack is updated. The reason is that CloudFormation doesn't call
      # the Lambda function during an update unless there is a change in the
      # input parameters.
      RandomToken: ACM-TMP-20200815-0749

  ######################################
  # Microsoft Active Directory Service #
  ######################################

  DirectoryService:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties:
      Name: !Ref DsName
      Password: !Ref DsPassword
      Edition: !Ref DsEdition
      VpcSettings:
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        VpcId: !Ref Vpc
      # AWS::DirectoryService::MicrosoftAD doesn't support Tags :-(

  ############
  # AmazonMQ #
  ############

  Amazonmq:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://arkcase-public-us-east-1.s3.amazonaws.com/DevOps/ACM-TMP-20200815-0749/CloudFormation/amazonmq.yml
      TimeoutInMinutes: 30
      Parameters:
        Env: !Ref Env
        Project: !Ref Project
        VpcId: !Ref Vpc
        SubnetIdA: !Ref PrivateSubnetA
        SubnetIdB: !Ref PrivateSubnetB
        InstanceType: !Ref AmazonmqInstanceType
        PasswordLength: !Ref PasswordsLength
        ActivemqVersion: !Ref ActivemqVersion
        MaintenanceDayOfWeek: !GetAtt MaintenanceWindows.StartAmazonmqMaintenanceDayOfWeek
        MaintenanceTimeOfDay: !GetAtt MaintenanceWindows.StartAmazonmqMaintenanceTimeOfDay
        EnableAuditLogs: !Ref AmazonmqEnableAuditLogs
      Tags:
        - Key: Name
          Value: !Sub amazonmq-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amazonmq
        - Key: Component
          Value: cfn
        - Key: ManagedBy
          Value: CloudFormation

  ###########################################################
  # Task definition custom resource with EFS specifications #
  ###########################################################

  TaskDefinitionResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TaskDefinitionResourceLambaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ecs:RegisterTaskDefinition
                  - ecs:DeregisterTaskDefinition
                Resource: "*"
                Effect: Allow

              - Action:
                  - iam:GetRole
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Sub task-definition-resource-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: global
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  TaskDefinitionResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: >
        CloudFormation custom resource backend to create a task definition that
        also supports EFS mounts
      Runtime: python3.6
      Role: !GetAtt TaskDefinitionResourceLambdaExecutionRole.Arn
      Handler: task_definition_resource.handler
      Timeout: 30
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200815-0749/LambdaFunctions/task_definition_resource/task_definition_resource.zip
      Tags:
        - Key: Name
          Value: !Sub task-definition-resource-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: global
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  ############
  # Database #
  ############

  # Security groups

  MariadbLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Lambda functions that access MariaDB
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub mariadb-lambda-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  MariadbAllowedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group that can access the MariaDB RDS instance
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub mariadb-allowed-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  MariadbInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the MariaDB RDS instance
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: Allow traffic from MariaDB-related Lambda functions
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt MariadbLambdaSecurityGroup.GroupId
        - Description: Allow traffic from authorized security group
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt MariadbAllowedSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub mariadb-instance-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  # MariaDB Master Secret

  MariadbMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Master secret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "master"}'
        GenerateStringKey: password
        PasswordLength: !Ref PasswordsLength
        # XXX ExcludeCharacters: "'/@\"\\%!#$&()*+,-.:;<=>?[]^_`{}|~"
        ExcludePunctuation: true
      Tags:
        - Key: Name
          Value: !Sub mariadb-master-secret-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: secretsmanager
        - Key: ManagedBy
          Value: CloudFormation

  MariadbMasterSecretPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref MariadbMasterSecret
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: !Ref AWS::AccountId
            Action: secretsmanager:DeleteSecret
            Resource: "*"

  # MariaDB Master Secret Rotation Lambda

  MariadbMasterRotationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SecretsManagerRotationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                Resource: !Ref MariadbMasterSecret

              - Effect: Allow
                Action: secretsmanager:GetRandomPassword
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub mariadb-master-secret-rotation-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  MariadbMasterRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Rotate MariaDB master secret
      Runtime: python3.7
      Role: !GetAtt MariadbMasterRotationLambdaExecutionRole.Arn
      Handler: mariadb_master_rotation.handler
      Timeout: 30
      VpcConfig:
        SecurityGroupIds: [ !GetAtt MariadbLambdaSecurityGroup.GroupId ]
        SubnetIds: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]
      Environment:
        Variables:
          PASSWORD_LENGTH: !Ref PasswordsLength
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200815-0749/LambdaFunctions/mariadb_master_rotation/mariadb_master_rotation.zip
      Tags:
        - Key: Name
          Value: !Sub mariadb-master-rotation-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  MariadbMasterRotationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MariadbMasterRotationLambda
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com

  # MariaDB Master Secret Rotation Schedule

  MariadbMasterSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    # NB: When CloudFormation initially creates this resource, SecretsManager
    #     will initate a secret rotation. So it's better to ensure everything
    #     is in place beforehand. SecretsManager will perform retries
    #     otherwise, but it's cleaner this way.
    DependsOn: [ MariadbMasterSecretAttachment, MariadbMasterRotationLambdaInvokePermission ]
    Properties:
      SecretId: !Ref MariadbMasterSecret
      RotationLambdaARN: !GetAtt MariadbMasterRotationLambda.Arn
      RotationRules:
        # NB: Password rotation will be triggered by a CloudWatch event, check
        #     the `MariadbMasterTriggerRule` resource.
        AutomaticallyAfterDays: 1000

  MariadbMasterTriggerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TriggerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:RotateSecret
                Resource: !Ref MariadbMasterSecret
      Tags:
        - Key: Name
          Value: !Sub mariadb-master-trigger-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  MariadbMasterTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Trigger a master secret rotation
      Runtime: python3.7
      Role: !GetAtt MariadbMasterTriggerLambdaExecutionRole.Arn
      Handler: rotation_trigger.handler
      Timeout: 30
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200815-0749/LambdaFunctions/rotation_trigger/rotation_trigger.zip
      Tags:
        - Key: Name
          Value: !Sub mariadb-master-trigger-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  MariadbMasterTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Periodically trigger a master secret rotation
      ScheduleExpression: !Sub cron(${MaintenanceWindows.StartRotateMasterPasswords})
      State: ENABLED
      Targets:
        - Id: MariadbMasterTrigger
          Arn: !GetAtt MariadbMasterTriggerLambda.Arn
          Input: !Sub '{"SecretArn": "${MariadbMasterSecret}"}'

  MariadbMasterTriggerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MariadbMasterTriggerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MariadbMasterTriggerRule.Arn

  # MariaDB RDS instance

  MariadbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet for the MariaDB RDS instance
      SubnetIds: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]
      Tags:
        - Key: Name
          Value: !Sub mariadb-db-subnet-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: rds
        - Key: ManagedBy
          Value: CloudFormation

  MariadbParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: MariaDB Parameter Group
      Family: mariadb10.4
      Parameters:
        max_allowed_packet: 1073741824
        skip_name_resolve: 1
        log_bin_trust_function_creators: 1
      Tags:
        - Key: Name
          Value: !Sub mariadb-parameter-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: rds
        - Key: ManagedBy
          Value: CloudFormation

  MariadbInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceClass: !Ref MariadbRdsInstanceClass
      Engine: mariadb
      EngineVersion: 10.4.8
      AutoMinorVersionUpgrade: true
      StorageType: gp2
      StorageEncrypted: true
      AllocatedStorage: !Ref MariadbRdsDiskSizeGB
      BackupRetentionPeriod: 35
      VPCSecurityGroups: [ !GetAtt MariadbInstanceSecurityGroup.GroupId ]
      DBSubnetGroupName: !Ref MariadbSubnetGroup
      DBParameterGroupName: !Ref MariadbParameterGroup
      MultiAZ: !Ref MariadbRdsEnableHotStandby
      PubliclyAccessible: false
      PreferredBackupWindow:
        !Sub ${MaintenanceWindows.StartRdsBackup}-${MaintenanceWindows.EndRdsBackup}
      PreferredMaintenanceWindow:
        !Sub ${MaintenanceWindows.StartRdsMaintenance}-${MaintenanceWindows.EndRdsMaintenance}
      MasterUsername: !Sub "{{resolve:secretsmanager:${MariadbMasterSecret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${MariadbMasterSecret}:SecretString:password}}"
      CACertificateIdentifier: rds-ca-2019
      Tags:
        - Key: Name
          Value: !Sub mariadb-rds-instance-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: rds
        - Key: ManagedBy
          Value: CloudFormation

  MariadbMasterSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MariadbMasterSecret
      TargetType: AWS::RDS::DBInstance
      TargetId: !Ref MariadbInstance

  # Lambda function for CFN custom resource to create a database

  MariadbCreateDatabaseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: CreateDatabasePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref MariadbMasterSecret
      Tags:
        - Key: Name
          Value: !Sub mariadb-create-database-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  MariadbCreateDatabaseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Create a database/schema in a MariaDB server
      Runtime: python3.7
      Role: !GetAtt MariadbCreateDatabaseLambdaExecutionRole.Arn
      Handler: mariadb_create_database.handler
      Timeout: 30
      VpcConfig:
        SecurityGroupIds: [ !GetAtt MariadbLambdaSecurityGroup.GroupId ]
        SubnetIds: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200815-0749/LambdaFunctions/mariadb_create_database/mariadb_create_database.zip
      Tags:
        - Key: Name
          Value: !Sub mariadb-create-database-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  ######################################
  # Internal Public Key Infrastructure #
  ######################################

  Pki:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://arkcase-public-us-east-1.s3.amazonaws.com/DevOps/ACM-TMP-20200815-0749/CloudFormation/pki.yml
      TimeoutInMinutes: 15
      Parameters:
        Env: !Ref Env
        Project: !Ref Project
        RenewCertificatesCron: !GetAtt MaintenanceWindows.StartRenewCertificates
        HowManyDaysLeftBeforeRenewing: !Ref HowManyDaysLeftBeforeRenewing
        AlertsSnsTopicArn: !Ref AlertsSnsTopic
      Tags:
        - Key: Name
          Value: !Sub pki-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: cfn
        - Key: ManagedBy
          Value: CloudFormation

  ###############
  # ECS cluster #
  ###############

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ecs-cluster-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: global
        - Key: Component
          Value: ecs
        - Key: ManagedBy
          Value: CloudFormation

  ################
  # Test backend #
  ################

  # Load balancer

  TestBackendLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the test-backend load balancer
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: http
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VpcCidr
        - Description: https
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub test-backend-load-balancer-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: test-backend
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  TestBackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      SecurityGroups: [ !GetAtt TestBackendLoadBalancerSecurityGroup.GroupId ]
      Subnets: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]
      Tags:
        - Key: Name
          Value: !Sub test-backend-load-balancer-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: test-backend
        - Key: Component
          Value: lb
        - Key: ManagedBy
          Value: CloudFormation

  TestBackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref Vpc
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckPath: /lb-ping
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  TestBackendListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref TestBackendLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            Port: 443
            Protocol: HTTPS
            StatusCode: HTTP_302

  TestBackendListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref TestBackendLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TestBackendTargetGroup
      Certificates:
        - CertificateArn: !GetAtt Pki.Outputs.TestBackendIamCertArn
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08

  # ECS cluster

  TestBackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365

  TestBackendTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub test-backend-task-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: test-backend
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  TestBackendTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub test-backend-task-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: test-backend
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  TestBackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: test-backend
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt TestBackendTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TestBackendTaskRole.Arn
      RequiresCompatibilities: [ FARGATE ]
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: test-backend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/test-backend:2
          HealthCheck:
            Command: [ CMD-SHELL, "curl -f http://localhost:8080/ecs-ping" ]
            Interval: 10
            Retries: 2
            StartPeriod: 5
            Timeout: 2
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref TestBackendLogGroup
              awslogs-stream-prefix: test-backend
          Essential: true
        - Name: nginx-tls
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/nginx-tls:3
          HealthCheck:
            Command: [ CMD-SHELL, "curl -sk https://localhost:8443/nginx-ecs-ping" ]
            Interval: 10
            Retries: 2
            StartPeriod: 5
            Timeout: 2
          PortMappings:
            - ContainerPort: 8443
              Protocol: tcp
          Environment:
            - Name: ACM_NGINX_DOMAIN_NAME
              # NB: `ACM_NGINX_DOMAIN_NAME` is only used for self-signed
              #     certificate, so its value is not important.
              Value: !Sub test-backend.${Project}.lan

            - Name: ACM_NGINX_UPSTREAM_HOST
              # NB: Containers in an `awsvpc` task can access each other on
              #     `localhost`
              Value: localhost

            - Name: ACM_NGINX_UPSTREAM_PORT
              Value: 8080
          Ulimits:
            - Name: nofile
              SoftLimit: 15000
              HardLimit: 15000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref TestBackendLogGroup
              awslogs-stream-prefix: nginx
          Essential: true
      Tags:
        - Key: Name
          Value: !Sub test-backend-task-defintion-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: test-backend
        - Key: Component
          Value: ecs
        - Key: ManagedBy
          Value: CloudFormation

  TestBackendTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the test-backend task
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: HTTPS from load balancer
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          SourceSecurityGroupId: !GetAtt TestBackendLoadBalancerSecurityGroup.GroupId
        - Description: HTTPS debug
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub test-backend-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: test-backend
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  TestBackendService:
    Type: AWS::ECS::Service
    DependsOn: TestBackendListenerHttps
    Properties:
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref TestBackendTaskDefinition
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 20
      LoadBalancers:
        - ContainerName: nginx-tls
          ContainerPort: 8443
          TargetGroupArn: !Ref TestBackendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [ !GetAtt TestBackendTaskSecurityGroup.GroupId ]
          Subnets: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]

  # Route53

  TestBackendDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub test-backend.${Project}.lan
      Type: A
      HostedZoneId: !Ref PrivateHostedZone
      AliasTarget:
        DNSName: !GetAtt TestBackendLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt TestBackendLoadBalancer.CanonicalHostedZoneID

  ############
  # Alfresco #
  ############

  # Database

  AlfrescoDatabase:
    Type: Custom::MariadbDatabase
    # NB: The Lambda function needs the secret to have the `host` fields etc.
    #     So we need to wait until the attachment is done.
    DependsOn: MariadbMasterSecretAttachment
    # NB: Upon deletion, for some reason, the backend Lambda function times out
    #     trying to communicate with the `ResponseURL`. In order to work around
    #     that CloudFormation bug, tell CloudFormation to not delete this
    #     `AlfrescoDatabase` custom resource.
    #     Please note that this does not mean that the database will not be
    #     destroyed. It will, along with the RDS instance.
    DeletionPolicy: Retain
    Properties:
      ServiceToken: !GetAtt MariadbCreateDatabaseLambda.Arn
      SecretArn: !Ref MariadbMasterSecret
      DatabaseName: alfresco
      Tags:
        - Key: Name
          Value: !Sub alfresco-database-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: database
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoDatabaseUser:
    Type: AWS::CloudFormation::Stack
    # Make sure the user is created after the database
    DependsOn: AlfrescoDatabase
    Properties:
      TemplateURL: https://arkcase-public-us-east-1.s3.amazonaws.com/DevOps/ACM-TMP-20200815-0749/CloudFormation/mariadb-user-secret.yml
      TimeoutInMinutes: 5
      Parameters:
        Env: !Ref Env
        Project: !Ref Project
        SubnetIds: !Join [ ",", [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ] ]
        RotationLambdaSecurityGroupId: !GetAtt MariadbLambdaSecurityGroup.GroupId
        RdsInstanceId: !Ref MariadbInstance
        DatabaseName: alfresco
        Username: alfresco
        PasswordLength: !Ref PasswordsLength
        UserSecretRotationCron: !GetAtt MaintenanceWindows.StartRotateUserPasswords
        MasterSecretArn: !Ref MariadbMasterSecret
      Tags:
        - Key: Name
          Value: !Sub alfresco-database-user-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: database
        - Key: ManagedBy
          Value: CloudFormation

  # Load balancer

  AlfrescoLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Alfresco load balancer
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: http
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VpcCidr
        - Description: https
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub alfresco-load-balancer-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      SecurityGroups: [ !GetAtt AlfrescoLoadBalancerSecurityGroup.GroupId ]
      Subnets: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]
      Tags:
        - Key: Name
          Value: !Sub alfresco-load-balancer-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: lb
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoRepositoryTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref Vpc
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckPath: /alfresco/
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  AlfrescoListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AlfrescoLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            Port: 443
            Protocol: HTTPS
            StatusCode: HTTP_302

  AlfrescoListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AlfrescoLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlfrescoRepositoryTargetGroup
      Certificates:
        - CertificateArn: !GetAtt Pki.Outputs.AlfrescoIamCertArn
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08

  # EFS filesystem

  AlfrescoEfsMountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Alfresco EFS mount targets
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: NFSv4 from this VPC
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt AlfrescoRepositoryTaskSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub alfresco-efs-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoEfs:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub alfresco-efs-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: efs
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoEfsMountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref AlfrescoEfs
      SubnetId: !Ref PrivateSubnetA
      SecurityGroups: [ !GetAtt AlfrescoEfsMountTargetSecurityGroup.GroupId ]

  AlfrescoEfsMountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref AlfrescoEfs
      SubnetId: !Ref PrivateSubnetB
      SecurityGroups: [ !GetAtt AlfrescoEfsMountTargetSecurityGroup.GroupId ]

  # ECS stuff for Alfresco Repository

  AlfrescoRepositoryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365

  AlfrescoRepositoryTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub alfresco-repository-task-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoRepositoryTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub alfresco-repository-task-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoRepositoryTaskDefinition:
    Type: Custom::TaskDefinition
    Properties:
      ServiceToken: !GetAtt TaskDefinitionResourceLambda.Arn
      family: acs-repository
      cpu: 2048
      memory: 8192
      executionRoleArn: !GetAtt AlfrescoRepositoryTaskExecutionRole.Arn
      taskRoleArn: !GetAtt AlfrescoRepositoryTaskRole.Arn
      requiresCompatibilities: [ FARGATE ]
      networkMode: awsvpc
      volumes:
        - name: alfresco-efs
          efsVolumeConfiguration:
            fileSystemId: !Ref AlfrescoEfs
      containerDefinitions:
        - name: acs-repository
          image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/acs-repository:4
          healthCheck:
            command: [ CMD-SHELL, "curl -f http://localhost:8080/alfresco/" ]
            interval: 10
            retries: 2
            startPeriod: 300  # 5 minutes; Alfresco is very slow to start but 300 seconds is the maximum allowed value
            timeout: 3
          portMappings:
            - containerPort: 8080
              protocol: tcp
          environment:
            - name: ARK_DB_SECRET_ARN
              value: !GetAtt AlfrescoDatabaseUser.Outputs.UserSecretArn

            - name: ARK_ACTIVEMQ_SECRET_ARN
              value: !GetAtt Amazonmq.Outputs.AlfrescoUserSecretArn

            - name: JAVA_OPTS
              # TODO: Add -Dshare.host=xyz etc. when Alfresco Share is ready
              value: !Sub >
                -Ddb.driver=org.mariadb.jdbc.Driver
                -Ddb.url="jdbc:mariadb://${MariadbInstance.Endpoint.Address}:${MariadbInstance.Endpoint.Port}/alfresco?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
                -Dindex.subsystem.name=noindex
                -Dalfresco.host=acs-repository.${Project}.lan
                -Dalfresco.port=443
                -Dalfresco.protocol=https
                -Daos.baseUrlOverwrite=https://acs-repository.${Project}.lan:443/alfresco/aos
                -Dmessaging.broker.connections.max=8
                -Dmessaging.broker.url="failover:(${Amazonmq.Outputs.OpenwireEndpoints})"
                -Dcsrf.filter.enabled=false
                -Djodconverter.enabled=false
                -Djodconverter.officeHome=null
                -Xms3500m
                -Xmx3500m
                -Dlocal.transform.service.enabled=false
                -Dtransform.service.enabled=false
                -Dlegacy.transform.service.enabled=false
                -DsyncService.mode=OFF
                -Dsync.mode=OFF
                -Dsync.pullJob.enabled=false
                -Dsync.pushJob.enabled=false
                -Dsystem.usages.enabled=false
                -Dsystem.usages.clearBatchSize=0
                -Dactivities.feed.notifier.enabled=false
                -Dactivities.feed.cleaner.enabled=false
                -Dactivities.post.cleaner.enabled=false
                -Dactivities.feed.generator.enabled=false
                -Dactivities.post.lookup.enabled=false
                -Dreplication.enabled=false
                -Dtransferservice.receiver.enabled=false
                -Dsystem.thumbnail.generate=false
          logConfiguration:
            logDriver: awslogs
            options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref AlfrescoRepositoryLogGroup
              awslogs-stream-prefix: acs-repository
          essential: true
          linuxParameters:
            initProcessEnabled: true

        - name: nginx-acs-repository
          image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/nginx-acs-repository:4
          healthCheck:
            command: [ CMD-SHELL, "curl -sk https://localhost:8443/nginx-ecs-ping.html" ]
            interval: 10
            retries: 2
            startPeriod: 5
            timeout: 2
          portMappings:
            - containerPort: 8443
              protocol: tcp
          environment:
            - name: ACM_NGINX_DOMAIN_NAME
              # NB: `ACM_NGINX_DOMAIN_NAME` is only used for self-signed
              #     certificate, so its value is not important.
              value: !Sub acs-repository.${Project}.lan

            - name: ACM_NGINX_ACS_REPO_HOST
              # NB: Containers in an `awsvpc` task can access each other on
              #     `localhost`
              value: localhost

            - name: ACM_NGINX_ACS_REPO_PORT
              value: 8080
          ulimits:
            - name: nofile
              softLimit: 15000
              hardLimit: 15000
          logConfiguration:
            logDriver: awslogs
            options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref AlfrescoRepositoryLogGroup
              awslogs-stream-prefix: nginx
          essential: true
          linuxParameters:
            initProcessEnabled: true

      tags:
        - key: Name
          value: !Sub alfresco-repository-task-defintion-${Project}-${Env}
        - key: Env
          value: !Ref Env
        - key: Project
          value: !Ref Project
        - key: Service
          value: test-backend
        - key: Component
          value: ecs
        - key: ManagedBy
          value: CloudFormation

  AlfrescoRepositoryTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Alfresco Repository task
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: HTTPS from load balancer
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          SourceSecurityGroupId: !GetAtt AlfrescoLoadBalancerSecurityGroup.GroupId
        - Description: HTTPS debug
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub alfresco-repository-task-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: alfresco
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

#XXX
#  AlfrescoRepositoryService:
#    Type: AWS::ECS::Service
#    DependsOn:
#      - AlfrescoListenerHttps
#      - AlfrescoEfsMountTargetA
#      - AlfrescoEfsMountTargetB
#    Properties:
#      Cluster: !Ref EcsCluster
#      TaskDefinition: !Ref AlfrescoRepositoryTaskDefinition
#      LaunchType: FARGATE
#      DesiredCount: 1  # NB: Alfresco CE doesn't support clustering
#      HealthCheckGracePeriodSeconds: 300
#      PlatformVersion: 1.4.0
#      LoadBalancers:
#        - ContainerName: nginx-acs-repository
#          ContainerPort: 8443
#          TargetGroupArn: !Ref AlfrescoRepositoryTargetGroup
#      NetworkConfiguration:
#        AwsvpcConfiguration:
#          AssignPublicIp: DISABLED
#          SecurityGroups:
#            - !GetAtt AlfrescoRepositoryTaskSecurityGroup.GroupId
#            - !GetAtt MariadbAllowedSecurityGroup.GroupId
#          Subnets: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]

  # Route53

#XXX
#  TestBackendDnsRecord:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      Name: !Sub test-backend.${Project}.lan
#      Type: A
#      HostedZoneId: !Ref PrivateHostedZone
#      AliasTarget:
#        DNSName: !GetAtt TestBackendLoadBalancer.DNSName
#        EvaluateTargetHealth: false
#        HostedZoneId: !GetAtt TestBackendLoadBalancer.CanonicalHostedZoneID

Outputs:
  StartBlockTraffic:
    Description: Begin weekly maintenance window
    Value: !GetAtt MaintenanceWindows.StartBlockTraffic

  StartRotateMasterPasswords:
    Description: When to start rotating master passwords
    Value: !GetAtt MaintenanceWindows.StartRotateMasterPasswords

  StartRotateUserPasswords:
    Description: When to start rotating user passwords
    Value: !GetAtt MaintenanceWindows.StartRotateUserPasswords

  StartRdsBackup:
    Description: When to start backing up RDS instances
    Value: !GetAtt MaintenanceWindows.StartRdsBackup

  EndRdsBackup:
    Description: When to end backing up RDS instances
    Value: !GetAtt MaintenanceWindows.EndRdsBackup

  StartRdsMaintenance:
    Description: When to start maintenance of the RDS instance
    Value: !GetAtt MaintenanceWindows.StartRdsMaintenance

  EndRdsMaintenance:
    Description: When to end maintenance of the RDS instance
    Value: !GetAtt MaintenanceWindows.EndRdsMaintenance

  StartAmazonmqMaintenanceDayOfWeek:
    Description: When to start maintenance of AmazonMQ (day of week)
    Value: !GetAtt MaintenanceWindows.StartAmazonmqMaintenanceDayOfWeek

  StartAmazonmqMaintenanceTimeOfDay:
    Description: When to start maintenance of AmazonMQ (time of day)
    Value: !GetAtt MaintenanceWindows.StartAmazonmqMaintenanceTimeOfDay

  StartAllowTraffic:
    Description: End weekly maintenance window
    Value: !GetAtt MaintenanceWindows.StartAllowTraffic
