# Copyright (c) 2020 Armedia, LLC
#
# Please note this CloudFormation template has been written with the
# expectation that it will "called" from another CloudFormation template.
---
AWSTemplateFormatVersion: 2010-09-09

Description: Deploy a PKI for ArkCase, with automated renewals

Parameters:
  Env:
    Type: String
    Description: Type of environment to provision
    Default: prod
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[-_.a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 30 alpha-numeric characters; can use underscores,
      dots and dashes

  Project:
    Type: String
    Description: Name of the project (or product)
    Default: arkcase
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[-_.a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 30 alpha-numeric characters; can use underscores,
      dots and dashes

  RenewCertificatesCron:
    Type: String
    Description: >
      Cron specification of when to check for certificate renewals. This must
      be specified using the AWS cron format and in UTC only.
    Default: 0 8 ? * SUN *
    MinLength: 11

  DaysBeforeExpiryCertificateRenewal:
    Type: Number
    Description: >
      How many days before expiry should a certificate be renewed
    MinValue: 0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: Definition }
        Parameters:
          - Env
          - Project

      - Label: { default: Renewals configuration }
        Parameters:
          - RenewCertificatesCron
          - DaysBeforeExpiryCertificateRenewal

    ParameterLabels:
      Env: { default: Environment }
      RenewCertificatesCron: { default: Renew certificates cron }
      DaysBeforeExpiryCertificateRenewal: { default: Days before expiry to renew a certificate }

Resources:

  #########################################
  # Lambda function to create certificate #
  #########################################

  CertificateLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CertificateLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:ListTagsForResource
                  - ssm:RemoveTagsFromResource
                  - ssm:AddTagsToResource
                Resource: arn:aws:ssm:*:*:parameter/arkcase/pki/*

              - Effect: Allow
                Action: ssm:DescribeParameters
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub certificate-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  CertificateLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Create or renew a certificate
      Runtime: python3.7
      Role: !GetAtt CertificateLambdaExecutionRole.Arn
      Handler: certificate.handler
      Timeout: 900  # 15 minutes
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200622-1841/LambdaFunctions/certificate/certificate.zip
      Tags:
        - Key: Name
          Value: !Sub certificate-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  ######################################################
  # Lambda function to periodically check for renewals #
  ######################################################

  RenewCertificatesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RenewCertificates
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:ListTagsForResource
                  - ssm:RemoveTagsFromResource
                  - ssm:AddTagsToResource
                Resource: arn:aws:ssm:*:*:parameter/arkcase/pki/*

              - Effect: Allow
                Action: ssm:DescribeParameters
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub renew-certificates-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  RenewCertificatesLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: >
        Scan all certificates to check whether they are close to expiry and
        renew them if needed
      Runtime: python3.7
      Role: !GetAtt RenewCertificatesLambdaExecutionRole.Arn
      Handler: renew_certificates.handler
      Timeout: 900  # 15 minutes
      Environment:
        Variables:
          CERT_PARAMETERS_PATHS: /arkcase/pki/certs
          RENEW_BEFORE_DAYS: !Ref DaysBeforeExpiryCertificateRenewal
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200622-1841/LambdaFunctions/renew_certificates/renew_certificates.zip
      Tags:
        - Key: Name
          Value: !Sub renew-certificates-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  RenewCertificatesRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Periodically check for certificate renewals
      ScheduleExpression: !Sub cron(${RenewCertificatesCron})
      State: ENABLED
      Targets:
        - Id: RenewCertificates
          Arn: !GetAtt RenewCertificatesLambda.Arn

  RenewCertificatesInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RenewCertificatesLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RenewCertificatesRule.Arn

  #################################################################
  # Lambda function for the `Certificate` custom resource backend #
  #################################################################

  CertificateResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CertificateResourceLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ssm:DeleteParameter
                Resource: arn:aws:ssm:*:*:parameter/arkcase/pki/*

              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt CertificateLambda.Arn
      Tags:
        - Key: Name
          Value: !Sub certificate-resource-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  CertificateResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: >
        Backend for CloudFormation custom resources to create or delete a
        certificate
      Runtime: python3.7
      Role: !GetAtt CertificateResourceLambdaExecutionRole.Arn
      Handler: certificate_resource.handler
      Timeout: 900  # 15 minutes
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200622-1841/LambdaFunctions/certificate_resource/certificate_resource.zip
      Tags:
        - Key: Name
          Value: !Sub certificate-resource-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: admin
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  #######
  # PKI #
  #######

  RootCaCertificate:
    Type: Custom::Certificate
    Properties:
      ServiceToken: !GetAtt CertificateResourceLambda.Arn
      CertificateLambdaArn: !GetAtt CertificateLambda.Arn
      KeyType: RSA
      KeySize: 4096
      ValidityDays: 7300  # About 20 years
      CountryName: US
      StateOrProvinceName: VA
      LocalityName: Vienna
      OrganizationName: Arkcase
      OrganizationalUnitName: Product Development
      EmailAddress: info@arkcase.com
      CommonName: root-ca.arkcase.internal
      BasicConstraints:
        Critical: true
        CA: true
      KeyUsage:
        Critical: true
        Usages: [ DigitalSignature, KeyCertSign, CrlSign ]
      SelfSigned: true
      CertParametersPaths: [ /arkcase/pki/certs ]
      KeyParameterName: /arkcase/pki/private/root-ca-key
      CertParameterName: /arkcase/pki/certs/root-ca-cert
      KeyTags:
        - Key: Name
          Value: !Sub root-ca-private-key-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: ssm
        - Key: ManagedBy
          Value: CloudFormation
      CertTags:
        - Key: Name
          Value: !Sub root-ca-certificate-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: ssm
        - Key: ManagedBy
          Value: CloudFormation
      Tags:
        - Key: Name
          Value: !Sub root-ca-certificate-resource-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: admin
        - Key: ManagedBy
          Value: CloudFormation

  IntermediateCaCertificate:
    Type: Custom::Certificate
    DependsOn: RootCaCertificate
    Properties:
      ServiceToken: !GetAtt CertificateResourceLambda.Arn
      CertificateLambdaArn: !GetAtt CertificateLambda.Arn
      KeyType: RSA
      KeySize: 4096
      ValidityDays: 730  # About 2 years
      CountryName: US
      StateOrProvinceName: VA
      LocalityName: Vienna
      OrganizationName: ArkCase
      OrganizationalUnitName: Product Development
      EmailAddress: info@arkcase.com
      CommonName: intermediate-ca.arkcase.internal
      BasicConstraints:
        Critical: true
        CA: true
        PathLength: 0
      KeyUsage:
        Critical: true
        Usages: [ DigitalSignature, KeyCertSign, CrlSign ]
      CaKeyParameterName: /arkcase/pki/private/root-ca-key
      CaCertParameterName: /arkcase/pki/certs/root-ca-cert
      CertParametersPaths: [ /arkcase/pki/certs ]
      KeyParameterName: /arkcase/pki/private/intermediate-ca-key
      CertParameterName: /arkcase/pki/certs/intermediate-ca-cert
      KeyTags:
        - Key: Name
          Value: !Sub intermediate-ca-private-key-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: ssm
        - Key: ManagedBy
          Value: CloudFormation
      CertTags:
        - Key: Name
          Value: !Sub intermediate-ca-certificate-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: ssm
        - Key: ManagedBy
          Value: CloudFormation
      Tags:
        - Key: Name
          Value: !Sub intermediate-ca-certificate-resource-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: admin
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoCertificate:
    Type: Custom::Certificate
    DependsOn: IntermediateCaCertificate
    Properties:
      ServiceToken: !GetAtt CertificateResourceLambda.Arn
      CertificateLambdaArn: !GetAtt CertificateLambda.Arn
      KeyType: RSA
      KeySize: 2048
      ValidityDays: 90
      CountryName: US
      StateOrProvinceName: VA
      LocalityName: Vienna
      OrganizationName: ArkCase
      OrganizationalUnitName: Product Development
      EmailAddress: info@arkcase.com
      CommonName: alfresco.arkcase.internal
      BasicConstraints:
        CA: false
      KeyUsage:
        Critical: true
        Usages: [ DigitalSignature, KeyEncipherment ]
      CaKeyParameterName: /arkcase/pki/private/intermediate-ca-key
      CaCertParameterName: /arkcase/pki/certs/intermediate-ca-cert
      KeyParameterName: /arkcase/pki/private/alfresco-key
      CertParameterName: /arkcase/pki/certs/alfresco-cert
      KeyTags:
        - Key: Name
          Value: !Sub alfresco-private-key-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: ssm
        - Key: ManagedBy
          Value: CloudFormation
      CertTags:
        - Key: Name
          Value: !Sub alfresco-certificate-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: ssm
        - Key: ManagedBy
          Value: CloudFormation
      Tags:
        - Key: Name
          Value: !Sub alfresco-certificate-resource-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: pki
        - Key: Component
          Value: admin
        - Key: ManagedBy
          Value: CloudFormation

Outputs:
  RootCaKeyParameterArn:
    Description: ARN of the SSM parameter storing the root CA private key
    Value: !GetAtt RootCaCertificate.KeyParameterArn

  RootCaCertParameterArn:
    Description: ARN of the SSM parameter storing the root CA certificate
    Value: !GetAtt RootCaCertificate.CertParameterArn

  IntermediateCaKeyParameterArn:
    Description: ARN of the SSM parameter storing the intermediate CA private key
    Value: !GetAtt IntermediateCaCertificate.KeyParameterArn

  IntermediateCaCertParameterArn:
    Description: ARN of the SSM parameter storing the intermediate CA certificate
    Value: !GetAtt IntermediateCaCertificate.CertParameterArn

  AlfrescoKeyParameterArn:
    Description: ARN of the SSM parameter storing the Alfresco service private key
    Value: !GetAtt AlfrescoCertificate.KeyParameterArn

  AlfrescoCertParameterArn:
    Description: ARN of the SSM parameter storing the Alfresco service certificate
    Value: !GetAtt AlfrescoCertificate.CertParameterArn
