# Copyright (c) 2020 Armedia, LLC
#
# Please note this CloudFormation template has been written with the
# expectation that it will "called" from another CloudFormation template.
---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Deploy an AmazonMQ broker with the help of SecretsManager to manage
  credentials and secret rotation

Parameters:
  Env:
    Type: String
    Description: Type of environment to provision
    Default: prod
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[-_.a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 30 alpha-numeric characters; can use underscores,
      dots and dashes

  Project:
    Type: String
    Description: Name of the project (or product)
    Default: arkcase
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[-_.a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 30 alpha-numeric characters; can use underscores,
      dots and dashes

  SecretResourceLambdaArn:
    Type: String
    Description: >
      ARN of the Lambda function which is the backend for the `Secret` custom
      resource
    MinLength: 1

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC where the AmazonMQ broker will live

  SubnetIdA:
    Type: AWS::EC2::Subnet::Id
    Description: >
      ID of the first subnet where the AmazonMQ broker and its hot standby will
      live

  SubnetIdB:
    Type: AWS::EC2::Subnet::Id
    Description: >
      ID of the second subnet where the AmazonMQ broker and its hot standby
      will live

  InstanceType:
    Type: String
    Description: The instance type to use for the AmazonMQ broker
    Default: mq.m5.large
    AllowedValues:
      - mq.t2.micro
      - mq.m5.large
      - mq.m5.xlarge
      - mq.m5.2xlarge
      - mq.m5.4xlarge

  PasswordLength:
    Type: Number
    Description: How long passwords should be
    Default: 40
    MinValue: 12
    MaxValue: 40

  MasterSecretRotationCron:
    Type: String
    Description: >
      Cron specification of when to trigger a rotation of the master secret.
      This must be specified using the AWS cron format and in UTC only.
    Default: 0 8 ? * SUN *
    MinLength: 11

  UserSecretRotationCron:
    Type: String
    Description: >
      Cron specification of when to trigger a rotation of the user secret.
      This must be specified using the AWS cron format and in UTC only.
    Default: 5 8 ? * SUN *
    MinLength: 11

  ActivemqVersion:
    Type: String
    Description: ActiveMQ version to use
    Default: 5.15.10
    AllowedValues: [ 5.15.10, 5.15.9, 5.15.8, 5.15.6, 5.15.0 ]

  MaintenanceDayOfWeek:
    Type: String
    Description: >
      Day of the week when maintenance will be performed on the AmazonMQ broker
    Default: Sunday
    AllowedValues: [ Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday ]

  MaintenanceTimeOfDay:
    Type: String
    Description: >
      Time when to start the weekly maintenance on the AmazonMQ broker, in UTC
      timezone
    Default: 08:00
    AllowedPattern: ^[0-2][0-9]:[0-5][0-9]$
    ConstraintDescription: Must be in the format "HH:MM"

  EnableAuditLogs:
    Type: String
    Description: >
      Whether to enable AmazonMQ audit logs
    Default: false
    AllowedValues: [ true, false ]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: Definition }
        Parameters:
          - Env
          - Project
          - SecretResourceLambdaArn

      - Label: { default: Network configuration }
        Parameters:
          - VpcId
          - SubnetIdA
          - SubnetIdB

      - Label: { default: AmazonMQ configuration }
        Parameters:
          - InstanceType
          - PasswordLength
          - MasterSecretRotationCron
          - UserSecretRotationCron
          - ActivemqVersion
          - MaintenanceDayOfWeek
          - MaintenanceTimeOfDay
          - EnableAuditLogs

    ParameterLabels:
      Env: { default: Environment }
      VpcId: { default: VPC ID }
      SubnetIdA: { default: First subnet ID }
      SubnetIdB: { default: Second subnet ID }
      InstanceType: { default: Instance type }
      PasswordLength: { default: Password length }
      MasterSecretRotationCron: { default: Master secret rotation cron }
      UserSecretRotationCron: { default: User secret rotation cron }
      ActivemqVersion: { default: ActiveMQ version }
      MaintenanceDayOfWeek: { default: Maintenance day of the week }
      MaintenanceTimeOfDay: { default: Maintenance start time }
      EnableAuditLogs: { default: Enable audit logs }

Rules:
  SubnetsInVpc:
    Assertions:
      - AssertDescription: All subnets must be in the VPC
        Assert:
          Fn::EachMemberIn:
            - Fn::ValueOfAll: [ "AWS::EC2::Subnet::Id", VpcId ]
            - Fn::RefAll: AWS::EC2::VPC::Id

Resources:

  ###################
  # AmazonMQ broker #
  ###################

  AllowedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group that can access the AmazonMQ broker
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub amazonmq-allowed-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amazonmq
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  BrokerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the AmazonMQ broker
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # TODO: close unnecessary ports
        - Description: Allow traffic from ArkCase containers for AMQP
          IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          SourceSecurityGroupId: !GetAtt AllowedSecurityGroup.GroupId
        - Description: Allow traffic from ArkCase containers for MQTT
          IpProtocol: tcp
          FromPort: 8883
          ToPort: 8883
          SourceSecurityGroupId: !GetAtt AllowedSecurityGroup.GroupId
        - Description: Allow traffic from ArkCase containers for OpenWire
          IpProtocol: tcp
          FromPort: 61617
          ToPort: 61617
          SourceSecurityGroupId: !GetAtt AllowedSecurityGroup.GroupId
        - Description: Allow traffic from ArkCase containers for STOMP
          IpProtocol: tcp
          FromPort: 61614
          ToPort: 61614
          SourceSecurityGroupId: !GetAtt AllowedSecurityGroup.GroupId
        - Description: Allow traffic from ArkCase containers for Websocket
          IpProtocol: tcp
          FromPort: 61619
          ToPort: 61619
          SourceSecurityGroupId: !GetAtt AllowedSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub amazonmq-broker-security-group-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amazonmq
        - Key: Component
          Value: vpc
        - Key: ManagedBy
          Value: CloudFormation

  BrokerConfig:
    Type: AWS::AmazonMQ::Configuration
    Properties:
      Name: !Sub activemq-config-${Project}-${Env}
      Description: ActiveMQ configuration
      EngineType: ACTIVEMQ
      EngineVersion: !Ref ActivemqVersion
      Data:
        Fn::Base64: |
            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <broker xmlns="http://activemq.apache.org/schema/core" schedulePeriodForDestinationPurge="10000">
              <!--
              A configuration contains all of the settings for your ActiveMQ broker, in XML format (similar to ActiveMQ's activemq.xml file).
              You can create a configuration before creating any brokers. You can then apply the configuration to one or more brokers.

              You can use additional attributes for the broker element above. These attributes allow you to configure broker-wide settings.

              For more information, see Configuration and Amazon MQ Broker Configuration Parameters in the Amazon MQ Developer Guide:
              https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html
              -->
              <!--
              Mirrored queues let you send a copy of each message to a topic with a similar name automatically.
              For more information, see http://activemq.apache.org/mirrored-queues.html

              Virtual destinations let you configure advanced routing of messages between destinations.
              For more information, see http://activemq.apache.org/virtual-destinations.html
              -->
              <!--
              <destinationInterceptors>
                <mirroredQueue copyMessage="true" postfix=".qmirror" prefix=""/>
                <virtualDestinationInterceptor>
                  <virtualDestinations>
                    <virtualTopic name="&gt;" prefix="VirtualTopicConsumers.*." selectorAware="false"/>
                    <compositeQueue name="MY.QUEUE">
                      <forwardTo>
                        <queue physicalName="FOO"/>
                        <topic physicalName="BAR"/>
                      </forwardTo>
                    </compositeQueue>
                  </virtualDestinations>
                </virtualDestinationInterceptor>
              </destinationInterceptors>
              -->
              <!--
              By default, Amazon MQ optimizes for queues with fast consumers:
              Consumers are considered fast if they are able to keep up with the rate of messages generated by producers.
              Consumers are considered slow if a queue builds up a backlog of unacknowledged messages, potentially causing a decrease in producer throughput.
              To instruct Amazon MQ to optimize for queues with slow consumers, set the concurrentStoreAndDispatchQueues attribute to false.
              For more information, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/ensuring-effective-amazon-mq-performance.html
              -->
              <!--
              <persistenceAdapter>
                <kahaDB  concurrentStoreAndDispatchQueues="false"/>
              </persistenceAdapter>
              -->
              <destinationPolicy>
                <policyMap>
                  <policyEntries>
                    <!--
                    gcInactiveDestinations is used to automatically purge inactive destinations
                    preventing them from unnecessarily using broker resources.

                    An 'inactive' destination is one that has no messages pending and no consumers connected.

                    For more information, see: http://activemq.apache.org/delete-inactive-destinations.html
                    -->
                    <policyEntry topic="&gt;" gcInactiveDestinations="true" inactiveTimoutBeforeGC="600000">
                      <!--
                      The constantPendingMessageLimitStrategy is used to prevent
                      slow topic consumers to block producers and affect other consumers
                      by limiting the number of messages that are retained

                      For more information, see: http://activemq.apache.org/slow-consumer-handling.html
                      -->
                      <pendingMessageLimitStrategy>
                        <constantPendingMessageLimitStrategy limit="1000"/>
                      </pendingMessageLimitStrategy>
                    </policyEntry>
                    <policyEntry queue="&gt;" gcInactiveDestinations="true" inactiveTimoutBeforeGC="600000" />
                    <!--
                    Destination policies let you configure a rich set of behaviors for your queues and topics.
                    For more information, see http://activemq.apache.org/per-destination-policies.html
                    -->
                    <!--
                    <policyEntry topic="FOO.&gt;">
                      <dispatchPolicy>
                        <roundRobinDispatchPolicy/>
                      </dispatchPolicy>
                      <subscriptionRecoveryPolicy>
                        <lastImageSubscriptionRecoveryPolicy/>
                      </subscriptionRecoveryPolicy>
                    </policyEntry>
                    <policyEntry advisoryForConsumed="true" tempTopic="true"/>
                    <policyEntry advisoryForConsumed="true" tempQueue="true"/>
                    -->
                  </policyEntries>
                </policyMap>
              </destinationPolicy>
              <!--
              Typically, destinations are created automatically when they are used. Amazon MQ lets you create destinations when the broker is started.
              For more information, see http://activemq.apache.org/configure-startup-destinations.html
              -->
              <!--
              <destinations>
                <queue physicalName="FOO.BAR"/>
                <topic physicalName="SOME.TOPIC"/>
              </destinations>
              -->
              <!--
              You can control advanced ActiveMQ features using plugins.
              -->
              <plugins>
                <!--
                The Authorization plugin allows you to control the groups of users that are allowed to perform certain operations on your destinations.
                For more information, see http://activemq.apache.org/security.html
                -->
                <authorizationPlugin>
                  <map>
                    <authorizationMap>
                      <authorizationEntries>
                        <authorizationEntry queue="alfresco.&gt;" admin="admin" read="admin,alfresco" write="admin,alfresco"/>
                        <authorizationEntry topic="alfresco.Advisory.&gt;" admin="admin" read="admin,alfresco" write="admin,alfresco"/>
                      </authorizationEntries>
                      <tempDestinationAuthorizationEntry>
                        <tempDestinationAuthorizationEntry admin="admin" read="admin" write="admin"/>
                      </tempDestinationAuthorizationEntry>
                    </authorizationMap>
                  </map>
                </authorizationPlugin>
                <!--
                The Discarding DLQ plugin simplifies the configuration of your global dead-letter queue strategy.
                You can take advantage of a more granular per-destination control by using destination policies.
                For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                -->
                <!--
                <discardingDLQBrokerPlugin dropAll="true" dropTemporaryQueues="true" dropTemporaryTopics="true"/>
                -->
                <!--
                The Force Persistency Mode plugin can override the persistency mode set on messages.
                -->
                <!--
                <forcePersistencyModeBrokerPlugin persistenceFlag="true"/>
                -->
                <!--
                The Redelivery plugin extends the capabilities of destination policies with respect to message redelivery.
                For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                -->
                <!--
                <redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">
                  <redeliveryPolicyMap>
                    <redeliveryPolicyMap>
                      <redeliveryPolicyEntries>
                        <redeliveryPolicy maximumRedeliveries="4" queue="SpecialQueue" redeliveryDelay="10000"/>
                      </redeliveryPolicyEntries>
                      <defaultEntry>
                        <redeliveryPolicy initialRedeliveryDelay="5000" maximumRedeliveries="4" redeliveryDelay="10000"/>
                      </defaultEntry>
                    </redeliveryPolicyMap>
                  </redeliveryPolicyMap>
                </redeliveryPlugin>
                -->
                <!--
                The Statistics plugin lets you query broker or destination statistics by sending messages to the broker.
                For more information, see http://activemq.apache.org/statisticsplugin.html
                -->
                <!--
                <statisticsBrokerPlugin/>
                -->
                <!--
                The Timestamping plugin lets the broker use server-side time instead of client-provided time for messages.
                For more information, see http://activemq.apache.org/timestampplugin.html
                -->
                <!--
                <timeStampingBrokerPlugin ttlCeiling="86400000" zeroExpirationOverride="86400000"/>
                -->
              </plugins>
              <!--
              Network connectors let you connect brokers into networks of brokers.
              For more information, see Creating and Configuring an Amazon MQ Network of Brokers
              (https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-creating-configuring-network-of-brokers.html)
              in the Amazon MQ Developer Guide and also Networks of Brokers
              (http://activemq.apache.org/networks-of-brokers.html) in the ActiveMQ documentation.
              -->
              <!--
              <networkConnectors>
                <networkConnector name="myNetworkConnector" userName="commonUser" uri="masterslave:(ssl://b-1a2b3c4d-1.mq.region.amazonaws.com:61617,ssl://b-1a2b3c4d-2.mq.region.amazonaws.com:61617)"/>
              </networkConnectors>
              -->
            </broker>
      Tags:
        - Key: Name
          Value: !Sub amazonmq-config-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amazonmq
        - Key: Component
          Value: amazonmq
        - Key: ManagedBy
          Value: CloudFormation

  Broker:
    Type: AWS::AmazonMQ::Broker
    DependsOn: [ MasterSecret, AlfrescoUserSecret ]
    Properties:
      BrokerName: !Sub AmazonMQ-${AWS::StackName}
      DeploymentMode: ACTIVE_STANDBY_MULTI_AZ
      EncryptionOptions:
        UseAwsOwnedKey: true
      EngineType: ACTIVEMQ
      EngineVersion: !Ref ActivemqVersion
      HostInstanceType: !Ref InstanceType
      SecurityGroups: [ !GetAtt BrokerSecurityGroup.GroupId ]
      SubnetIds: [ !Ref SubnetIdA, !Ref SubnetIdB ]
      PubliclyAccessible: false
      Configuration:
        Id: !Ref BrokerConfig
        Revision: !GetAtt BrokerConfig.Revision
      Users:
        - Username: !Sub "{{resolve:secretsmanager:${MasterSecret}:SecretString:username}}"
          Password: !Sub "{{resolve:secretsmanager:${MasterSecret}:SecretString:password}}"
          Groups: !Split [ ",", !Sub "{{resolve:secretsmanager:${MasterSecret}:SecretString:groups}}" ]
        - Username: !Sub "{{resolve:secretsmanager:${AlfrescoUserSecret}:SecretString:username}}"
          Password: !Sub "{{resolve:secretsmanager:${AlfrescoUserSecret}:SecretString:password}}"
          Groups: !Split [ ",", !Sub "{{resolve:secretsmanager:${AlfrescoUserSecret}:SecretString:groups}}" ]
      MaintenanceWindowStartTime:
        DayOfWeek: !Ref MaintenanceDayOfWeek
        TimeOfDay: !Ref MaintenanceTimeOfDay
        TimeZone: UTC
      Logs:
        Audit: false
        General: true
      AutoMinorVersionUpgrade: true
      Tags:
        - Key: Name
          Value: !Sub amazonmq-broker-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amq
        - Key: Component
          Value: amazonmq
        - Key: ManagedBy
          Value: CloudFormation

  #################
  # Master Secret #
  #################

  MasterSecret:
    Type: Custom::Secret
    Properties:
      ServiceToken: !Ref SecretResourceLambdaArn
      Description: Master credentials to connect to the AmazonMQ broker
      GenerateSecretString:
        # NB: The `groups` field must be present and be a comma-separated list
        SecretStringTemplate: !Sub '{"username": "admin1", "groups": "admin"}'
        GenerateStringKey: password
        PasswordLength: !Ref PasswordLength
        # XXX ExcludeCharacters: "'/@\"\\%!#$&()*+,-.:;<=>?[]^_`{}|~"
        ExcludePunctuation: true
      Tags:
        - Key: Name
          Value: !Sub amazonmq-master-secret-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amazonmq
        - Key: Component
          Value: secretsmanager
        - Key: ManagedBy
          Value: CloudFormation

  MasterSecretConfig:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://arkcase-public-us-east-1.s3.amazonaws.com/DevOps/ACM-TMP-20200818-1235/CloudFormation/amqsecretcfg.yml
      TimeoutInMinutes: 5
      Parameters:
        Env: !Ref Env
        Project: !Ref Project
        PasswordLength: !Ref PasswordLength
        SecretArn: !Ref MasterSecret
        SecretRotationCron: !Ref MasterSecretRotationCron
        BrokerId: !Ref Broker
        BrokerArn: !GetAtt Broker.Arn
      Tags:
        - Key: Name
          Value: !Sub amazonmq-master-secret-config-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amazonmq
        - Key: Component
          Value: cfn
        - Key: ManagedBy
          Value: CloudFormation

  ########################
  # Alfresco User Secret #
  ########################

  AlfrescoUserSecret:
    Type: Custom::Secret
    Properties:
      ServiceToken: !Ref SecretResourceLambdaArn
      Description: >
        Credentials to allow Alfresco to connect to the AmazonMQ broker
      GenerateSecretString:
        # NB: The `groups` field must be present and be a comma-separated list
        SecretStringTemplate: '{"username": "alfresco1", "groups": ["alfresco"]}'
        GenerateStringKey: password
        PasswordLength: !Ref PasswordLength
        # XXX ExcludeCharacters: "'/@\"\\%!#$&()*+,-.:;<=>?[]^_`{}|~"
        ExcludePunctuation: true
      Tags:
        - Key: Name
          Value: !Sub amazonmq-alfresco-user-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amazonmq
        - Key: Component
          Value: secretsmanager
        - Key: ManagedBy
          Value: CloudFormation

  AlfrescoUserSecretConfig:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://arkcase-public-us-east-1.s3.amazonaws.com/DevOps/ACM-TMP-20200818-1235/CloudFormation/amqsecretcfg.yml
      TimeoutInMinutes: 5
      Parameters:
        Env: !Ref Env
        Project: !Ref Project
        PasswordLength: !Ref PasswordLength
        SecretArn: !Ref AlfrescoUserSecret
        SecretRotationCron: !Ref UserSecretRotationCron
        BrokerId: !Ref Broker
        BrokerArn: !GetAtt Broker.Arn
      Tags:
        - Key: Name
          Value: !Sub amazonmq-alfresco-user-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amazonmq
        - Key: Component
          Value: cfn
        - Key: ManagedBy
          Value: CloudFormation

Outputs:
  AllowedSecurityGroupId:
    Description: >
      ID of the security group allowed to connect to the AmazonMQ broker
    Value: !GetAtt AllowedSecurityGroup.GroupId

  AlfrescoUserSecretArn:
    Description: ARN of the credential secret to be used by Alfresco
    Value: !Ref AlfrescoUserSecret

  AmqpEndpoints:
    Description: AmazonMQ broker AMQP endpoints
    Value: !Join [ ",", !GetAtt Broker.AmqpEndpoints ]

  MqttEndpoints:
    Description: AmazonMQ broker MQTT endpoints
    Value: !Join [ ",", !GetAtt Broker.MqttEndpoints ]

  OpenwireEndpoints:
    Description: AmazonMQ broker Openwire endpoints
    Value: !Join [ ",", !GetAtt Broker.OpenWireEndpoints ]

  StompEndpoints:
    Description: AmazonMQ broker STOMP endpoints
    Value: !Join [ ",", !GetAtt Broker.StompEndpoints ]

  WssEndpoints:
    Description: AmazonMQ broker WSS endpoints
    Value: !Join [ ",", !GetAtt Broker.WssEndpoints ]
