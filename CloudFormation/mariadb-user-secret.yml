# Copyright (c) 2020 Armedia, LLC
#
# Please note this CloudFormation template has been written with the
# expectation that it will "called" from another CloudFormation template.
#
# Please note that when the secret rotation schedule is first created,
# SecretsManager will immediately rotate the secret. It is during this first
# rotation that the user will actually be created inside the MariaDB database.
---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Create and manage a MariaDB user secret with periodic rotation

Parameters:
  Env:
    Type: String
    Description: Type of environment to provision
    Default: prod
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[-_.a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 30 alpha-numeric characters; can use underscores,
      dots and dashes

  Project:
    Type: String
    Description: Name of the project (or product)
    Default: arkcase
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[-_.a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 30 alpha-numeric characters; can use underscores,
      dots and dashes

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: IDs of the subnets where the RDS instance should be placed

  RotationLambdaSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: ID of the security group for the rotation Lambda function

  RdsInstanceId:
    Type: String
    Description: ID of the MariaDB RDS instance to link with this user
    MinLength: 1

  DatabaseName:
    Type: String
    Description: Database name
    Default: main
    MinLength: 1
    MaxLength: 60
    AllowedPattern: ^[_a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 60 alpha-numeric characters; can use underscores

  Username:
    Type: String
    Description: Username for this user
    Default: user
    MinLength: 1
    MaxLength: 60
    AllowedPattern: ^[_a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 60 alpha-numeric characters; can use underscores

  PasswordLength:
    Type: Number
    Description: How long database passwords should be
    Default: 20
    MinValue: 8
    MaxValue: 80

  UserSecretRotationCron:
    Type: String
    Description: >
      Cron specification of when to trigger a rotation of the user secret.
      This must be specified using the AWS cron format and in UTC only.
    Default: 5 8 ? * SUN *
    MinLength: 11

  MasterSecretArn:
    Type: String
    Description: >
      ARN of the master secret to use to rotate this user credentials
    MinLength: 1

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: Definition }
        Parameters:
          - Env
          - Project

      - Label: { default: Network configuration }
        Parameters:
          - SubnetIds
          - RotationLambdaSecurityGroupId

      - Label: { default: Secrets configuration }
        Parameters:
          - RdsInstanceId
          - DatabaseName
          - Username
          - PasswordLength
          - UserSecretRotationCron
          - MasterSecretArn

    ParameterLabels:
      Env: { default: Environment }
      SubnetIds: { default: Subnet IDs }
      RotationLambdaSecurityGroupId: { default: Rotation lambda security group ID }
      RdsInstanceId: { default: RDS instance ID }
      DatabaseName: { default: Database name }
      PasswordLength: { default: Password length }
      UserSecretRotationCron: { default: User secret rotation cron }
      MasterSecretArn: { default: Master secret ARN }

Resources:

  ###############
  # User Secret #
  ###############

  UserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: User credentials to connect to the database
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${Username}", "masterarn": "${MasterSecretArn}", "dbname": "${DatabaseName}"}'
        GenerateStringKey: password
        PasswordLength: !Ref PasswordLength
        ExcludeCharacters: "'/@\"\\%"
      Tags:
        - Key: Name
          Value: !Sub mariadb-user-secret-${Username}-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: secretsmanager
        - Key: ManagedBy
          Value: CloudFormation

  UserSecretPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref UserSecret
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: !Ref AWS::AccountId
            Action: secretsmanager:DeleteSecret
            Resource: "*"

  ########################
  # User Rotation Lambda #
  ########################

  UserRotationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SecretsManagerRotationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                Resource: !Ref UserSecret

              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref MasterSecretArn

              - Effect: Allow
                Action: secretsmanager:GetRandomPassword
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub mariadb-rotation-lambda-execution-role-${Username}-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  UserRotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Rotate MariaDB user password
      Runtime: python3.7
      Role: !GetAtt UserRotationLambdaExecutionRole.Arn
      Handler: mariadb_rotation.handler
      Timeout: 30
      VpcConfig:
        SecurityGroupIds: [ !Ref RotationLambdaSecurityGroupId ]
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          PASSWORD_LENGTH: !Ref PasswordLength
          GRANTS: >
            SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES,
            INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES,
            EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE,
            ALTER ROUTINE, EVENT, TRIGGER
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200603-1421/LambdaFunctions/mariadb_rotation/mariadb_rotation.zip
      Tags:
        - Key: Name
          Value: !Sub mariadb-rotation-lambda-${Username}-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  UserRotationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UserRotationLambda
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com

  #################################
  # User Secret Rotation Schedule #
  #################################

  UserSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    # NB: When creating this resource, SecretsManager will initate a secret
    #     rotation. So it's better to ensure everything is in place beforehand.
    #     SecretsManager will perform retries otherwise, but it's cleaner this
    #     way.
    DependsOn: [ UserSecretAttachment, UserRotationLambdaInvokePermission ]
    Properties:
      SecretId: !Ref UserSecret
      RotationLambdaARN: !GetAtt UserRotationLambda.Arn
      RotationRules:
        # NB: Password rotation will be triggered by a CloudWatch event, check
        #     the `UserTriggerRule` resource.
        AutomaticallyAfterDays: 1000

  UserTriggerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TriggerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:RotateSecret
                Resource: !Ref UserSecret
      Tags:
        - Key: Name
          Value: !Sub mariadb-rotation-trigger-lambda-execution-role-${Username}-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  UserTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Trigger a user secret rotation
      Runtime: python3.7
      Role: !GetAtt UserTriggerLambdaExecutionRole.Arn
      Handler: rotation_trigger.handler
      Timeout: 10
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200603-1421/LambdaFunctions/rotation_trigger/rotation_trigger.zip
      Tags:
        - Key: Name
          Value: !Sub mariadb-rotation-trigger-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: database
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  UserTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Periodically trigger a user secret rotation
      ScheduleExpression: !Sub cron(${UserSecretRotationCron})
      State: ENABLED
      Targets:
        - Id: UserTriggerLambda
          Arn: !GetAtt UserTriggerLambda.Arn
          Input: !Sub '{"SecretArn": "${UserSecret}"}'

  UserTriggerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UserTriggerRule.Arn
      FunctionName: !Ref UserTriggerLambda

  UserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref UserSecret
      TargetType: AWS::RDS::DBInstance
      TargetId: !Ref RdsInstanceId

Outputs:
  UserSecretArn:
    Description: ARN of the user secret
    Value: !Ref UserSecret
