# Copyright (c) 2020 Armedia, LLC
---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Create a SecretsManager secret suitable for being used for an AmazonMQ user.
  The secret will be rotated periodically.

Parameters:
  Env:
    Type: String
    Description: Type of environment to provision
    Default: prod
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[-_.a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 30 alpha-numeric characters; can use underscores,
      dots and dashes

  Project:
    Type: String
    Description: Name of the project (or product)
    Default: arkcase
    MinLength: 1
    MaxLength: 30
    AllowedPattern: ^[-_.a-zA-Z0-9]*$
    ConstraintDescription: >
      Up to 30 alpha-numeric characters; can use underscores,
      dots and dashes

  PasswordLength:
    Type: Number
    Description: How long passwords should be
    Default: 20
    MinValue: 15
    MaxValue: 80

  SecretArn:
    Type: String
    Description: ARN of the secret
    MinLength: 1

  SecretRotationCron:
    Type: String
    Description: >
      Cron specification of when to trigger a rotation of the master secret.
      This must be specified using the AWS cron format.
    Default: 0 8 ? * SUN *
    MinLength: 11

  BrokerId:
    Type: String
    Description: >
      ID of the AmazonMQ broker for which this secret will be created
    MinLength: 1

  BrokerArn:
    Type: String
    Description: >
      ARN of the AmazonMQ broker for which this secret will be created
    MinLength: 1

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: Definition }
        Parameters:
          - Env
          - Project

      - Label: { default: Secret configuration }
        Parameters:
          - SecretArn
          - SecretRotationCron
          - BrokerId
          - BrokerArn

    ParameterLabels:
      Env: { default: Environment }
      SecretArn: { default: Secret ARN }
      SecretRotationCron: { default: Secret rotation cron specification }
      BrokerId: { default: Broker ID }
      BrokerArn: { default: Broker ARN }

Resources:

  #################
  # Secret Policy #
  #################

  SecretPolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretArn
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: !Ref AWS::AccountId
            Action: secretsmanager:DeleteSecret
            Resource: "*"

  ###################
  # Rotation Lambda #
  ###################

  RotationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerRotationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                Resource: !Ref SecretArn

              - Effect: Allow
                Action: secretsmanager:GetRandomPassword
                Resource: "*"

              - Effect: Allow
                Action:
                  - mq:ListUsers
                  - mq:CreateUser
                  - mq:UpdateUser
                Resource: !Ref BrokerArn
      Tags:
        - Key: Name
          Value: !Sub amqsecretcfg-rotation-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amq
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  RotationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Rotate AmazonMQ secret
      Runtime: python3.7
      Role: !GetAtt RotationLambdaExecutionRole.Arn
      Handler: amazonmq_rotation.handler
      Timeout: 30
      Environment:
        Variables:
          PASSWORD_LENGTH: !Ref PasswordLength
          AMAZONMQ_BROKER_ID: !Ref BrokerId
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200805-1102/LambdaFunctions/amazonmq_rotation/amazonmq_rotation.zip
      Tags:
        - Key: Name
          Value: !Sub amqsecretcfg-rotation-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amq
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  RotationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RotationLambda
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com

  ############################
  # Secret Rotation Schedule #
  ############################

  SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    # NB: When creating this resource, SecretsManager will initate a secret
    #     rotation. So it's better to ensure everything is in place beforehand.
    #     SecretsManager will perform retries otherwise, but it's cleaner this
    #     way.
    DependsOn: RotationLambdaInvokePermission
    Properties:
      SecretId: !Ref SecretArn
      RotationLambdaARN: !GetAtt RotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 1000
        # NB: Actually, a CloudWatch event will trigger a weekly rotation
        #     during the global maintenance window

  TriggerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TriggerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:RotateSecret
                Resource: !Ref SecretArn
      Tags:
        - Key: Name
          Value: !Sub amqsecretcfg-trigger-lambda-execution-role-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amq
        - Key: Component
          Value: iam
        - Key: ManagedBy
          Value: CloudFormation

  TriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Trigger a secret rotation
      Runtime: python3.7
      Role: !GetAtt TriggerLambdaExecutionRole.Arn
      Handler: rotation_trigger.handler
      Timeout: 10
      Code:
        S3Bucket: !Sub arkcase-public-${AWS::Region}
        S3Key: DevOps/ACM-TMP-20200805-1102/LambdaFunctions/rotation_trigger/rotation_trigger.zip
      Tags:
        - Key: Name
          Value: !Sub amqsecretcfg-trigger-lambda-${Project}-${Env}
        - Key: Env
          Value: !Ref Env
        - Key: Project
          Value: !Ref Project
        - Key: Service
          Value: amq
        - Key: Component
          Value: lambda
        - Key: ManagedBy
          Value: CloudFormation

  TriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Periodically trigger a secret rotation
      ScheduleExpression: !Sub cron(${SecretRotationCron})
      State: ENABLED
      Targets:
        - Id: TriggerLambda
          Arn: !GetAtt TriggerLambda.Arn
          Input: !Sub '{"SecretArn": "${SecretArn}"}'

  TriggerLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TriggerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TriggerRule.Arn
